#!/usr/bin/env node


/**
 * Module dependencies.
 */

var program = require('commander');
var pkg = require('./package.json');
var parse = require('url').parse;
var ip = require('ip');
var Socks = require('socks');
var _ = require('lodash');
var fs = require('fs');
var parser = require('http-string-parser');

var socksOptions = [];

var configs = JSON.parse(fs.readFileSync('config.json', 'utf8'));
_.each(configs, function(config) {
    var options = {
        proxy: {
            ipaddress: config.host,
            port: config.port,
            type: 5,
            command: "connect",
            authentication: {
                username: config.username,
                password: config.password
            }
        },
        timeout: 10000
    };
    socksOptions.push(options);
});


// Read args
program
    .version(pkg.version)
    .usage('[options] <url>')
    .option('-s, --start <n>', 'start ip')
    .option('-e, --end <n>', 'end ip')
    .option('-p, --port <n>', 'port', parseInt)
    .parse(process.argv);

var url = process.argv[process.argv.length - 1];
if (!url) throw new Error('url required');
url = parse(url);

var startIp = ip.toLong(program.start) || program.start || 0;
var endIp = ip.toLong(program.end) || program.end || 0xFFFFFFFF;
var port = program.port;

var req = [
    'GET ' + url.path + ' HTTP/1.1',
    'Host: ' + url.host,
    'Accept: */*',
    'Connection: close',
    'User-Agent: anon/shotgun',
    '',
    ''
].join('\r\n');

while (startIp < endIp) {
    send(startIp, port, url);
    startIp ++;
}

function send(checkIp, port, url) {
    var bucket = checkIp % configs.length;
    var proxyRequestOption = _.extend({}, socksOptions[bucket], {
        target: {
            host: ip.fromLong(checkIp),
            port: port || url.protocol === "https" ? 443 : 80
        }
    });

    Socks.createConnection(proxyRequestOption, function(err, socket) {
        if (!err) {
            socket.on('data', function(data) {
                var response = parser.parseResponse(data.toString());
                var status = response.statusCode - 0;
                if(status >= 200 & status < 400)
                    console.log(proxyRequestOption.target.host);
            });
            socket.write(req);
            socket.resume();
        }
    });
}
