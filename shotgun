#!/usr/bin/env node


/**
 * Module dependencies.
 */

var program = require('commander');
var pkg = require('./package.json');
var parse = require('url').parse;
var net = require('net');
var tls = require('tls');
var ip = require('ip');

// Set up socks agents using config.json
var socks = require('socksv5');
var http = require('http');
var https = require('https');
var _ = require('lodash');
var fs = require('fs');

var httpsAgents = [], httpAgents = [];

var configs = JSON.parse(fs.readFileSync('config.json', 'utf8'));
_.each(configs, function(config) {
    var auth  = config.username? socks.auth.UserPassword(config.username, config.password) : socks.auth.None();
    var socksConfig = {
        proxyHost: config.host,
        proxyPort: config.port,
        auths: [ auth ]
    };
    httpAgents.push(new socks.HttpAgent(socksConfig));
    httpsAgents.push(new socks.HttpsAgent(socksConfig));
});


// Read args

program
    .version(pkg.version)
    .usage('[options] <url>')
    .option('-s, --start <n>', 'start ip')
    .option('-e, --end <n>', 'end ip')
    .option('-p, --port <n>', 'port', parseInt)
    .parse(process.argv);

var url = process.argv[process.argv.length - 1];
if (!url) throw new Error('url required');
url = parse(url);

var startIp = ip.toLong(program.start) || program.start || 0;
var endIp = ip.toLong(program.end) || program.end || 0xFFFFFFFF;
var port = program.port;

var req = [
    'Host: ' + url.host + '\r\n',
    'Accept: */*\r\n'
].join('');

while (startIp < endIp) {
    send(startIp, port, url);
    startIp ++;
}

function send(checkIp, port, url) {
    var bucket = checkIp % configs.length;
    var secure = 'https:' == url.protocol;
    var opts = {
        host: url.host,
        port: port || (secure ? 443 : 80),
        method: 'GET',
        path: '/',
        //agent: secure ? httpsAgents[bucket] : httpAgents[bucket],
        headers: {
            'Accept': '*/*',
            'User-Agent': 'anon/shotgun'
        }
    };

    var mod = secure ? https : http;

    var sock = mod.request(opts, function(res){
        console.log(res.statusCode, res.headers);
    });

    sock.write(req);
    sock.end();
}
